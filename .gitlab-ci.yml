# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: python:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
services:
  - mysql:latest
  - postgres:latest

variables:
  POSTGRES_DB: database_name

# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - ~/.cache/pip/

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command
stages:
  - test
  - deploy

UnitTest:
  stage: test
  before_script:
    - python -V
    - pip install -r backend/secfit/requirements.txt
  variables:
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  script:
    - python backend/secfit/manage.py test workouts
    - python backend/secfit/manage.py test users

Deployment:
    stage: deploy
    image: python:latest
    script:
        - dpl --provider=heroku --app=$HEROKU_APP_APPNAME --api-key=$HEROKU_API_KEY
        - export HEROKU_API_KEY=$HEROKU_APIKEY
        - heroku run --app $HEROKU_APPNAME python backend/secfit/manage.py migrate
    environment:
      name: production
      url: $HEROKU_APP_HOST
